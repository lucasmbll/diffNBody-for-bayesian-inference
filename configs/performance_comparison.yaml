# Configuration for performance comparison of N-body simulation methods

# Use with: python test/performance_comparison.py --config configs/performance_comparison.yaml

cuda_visible_devices: 6  # GPU index to use (set to null for CPU)

# --- PERFORMANCE TESTING PARAMETERS ---
performance_params:
  # Simulation parameters for benchmarking
  t_f: 0.1              # Final time (short for benchmarking)
  dt: 0.01              # Time step
  G: 5.0                # Gravitational constant
  softening: 0.1        # Softening length
  length: 32            # Box size (smaller for faster computation)
  
  # Range of particle counts to test
  n_part_range: [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000]
  
  # Alternative ranges for different testing scenarios:
  # Small range for quick testing:
  # n_part_range: [500, 750, 1000, 1250, 1500]
  
  # Large range for comprehensive testing:
  # n_part_range: [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]
  
  # Extended range for heavy benchmarking:
  # n_part_range: [1000, 2500, 5000, 7500, 10000, 12500, 15000]

# --- METHODS TO TEST ---
# Set to true to enable testing, false to skip
methods_to_test:
  jax_experimental_ode: true       # JAX + experimental.ode
  jax_diffrax_nojit: true         # JAX + Diffrax without JIT compilation
  jax_diffrax_jit: true           # JAX + Diffrax with JIT compilation
  jax_diffrax_flat_nojit: true    # JAX + Diffrax flat state without JIT
  jax_diffrax_flat_jit: true      # JAX + Diffrax flat state with JIT

# --- OUTPUT SETTINGS ---
output_settings:
  # Plot settings
  create_linear_plot: true         # Linear scale performance plot
  create_log_plot: true           # Logarithmic scale performance plot
  create_speedup_plot: true       # Speedup comparison plot
  create_success_plot: true       # Success rate plot
  
  # Data export settings
  save_raw_data: true             # Save raw timing data as NPZ file
  save_summary_report: true       # Save detailed text summary
  
  # Figure settings
  figure_dpi: 300                 # DPI for saved figures
  figure_format: "png"            # Figure format (png, pdf, svg)

# --- ADVANCED SETTINGS ---
advanced_settings:
  # Timeout settings (in seconds)
  max_time_per_method: 300        # Maximum time to wait for each method
  
  # Error handling
  continue_on_error: true         # Continue testing other methods if one fails
  
  # Memory management
  clear_cache_between_tests: true # Clear JAX cache between tests
  
  # Reproducibility
  random_seed: 42                 # Seed for initialization (consistent across methods)

# --- TESTING SCENARIOS ---
# Uncomment one of these sections to use predefined testing scenarios

# Quick test scenario (for development/debugging):
# performance_params:
#   t_f: 0.05
#   dt: 0.01
#   n_part_range: [500, 1000, 1500]

# Memory-limited scenario (for systems with limited RAM/VRAM):
# performance_params:
#   t_f: 0.1
#   dt: 0.02
#   n_part_range: [1000, 2000, 3000, 4000]

# High-precision scenario (for accuracy testing):
# performance_params:
#   t_f: 0.2
#   dt: 0.005
#   n_part_range: [1000, 2000, 3000]

# Large-scale scenario (for production benchmarking):
# performance_params:
#   t_f: 0.1
#   dt: 0.01
#   n_part_range: [5000, 7500, 10000, 12500, 15000]

# --- ANALYSIS PARAMETERS ---
analysis_params:
  # Performance metrics to compute
  compute_scaling_analysis: true   # Analyze computational scaling (O(N^x))
  compute_efficiency_metrics: true # Compute efficiency vs NumPy baseline
  
  # Statistical analysis
  min_successful_runs: 3          # Minimum successful runs for valid analysis
  
  # Recommendations
  generate_recommendations: true   # Generate usage recommendations
  
# --- HARDWARE INFO ---
# This section is for documentation purposes
hardware_info:
  # Document your hardware for reproducibility
  gpu_model: "RTX 4090"          # GPU model being used
  cpu_model: "Intel i9-12900K"   # CPU model
  ram_gb: 64                     # Total RAM in GB
  gpu_memory_gb: 24              # GPU memory in GB
  
  # JAX/CUDA versions (for documentation)
  jax_version: "0.4.20"          # JAX version
  cuda_version: "11.8"           # CUDA version
  
# --- NOTES ---
# Performance notes:
# - JAX methods may be slower on first run due to compilation overhead
# - GPU methods require sufficient VRAM for larger particle counts
# - JAX can utilize multiple cores/GPU efficiently
# - Results may vary significantly between CPU and GPU execution
# - JIT compilation provides significant speedup but adds startup cost